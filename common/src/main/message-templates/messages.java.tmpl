/*
 * This file is part of TabTPS, licensed under the MIT License.
 *
 * Copyright (c) 2020-2024 Jason Penilla
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
<%def propPattern = ~/[.-]/
%>package $packageName;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.framework.qual.DefaultQualifier;
import xyz.jpenilla.tabtps.common.util.TranslatableProvider;

@DefaultQualifier(NonNull.class)
public final class ${className} {
  private static final String BUNDLE_NAME = "${bundleName}";
<%
for (prop in keys.sort()) {
  def propKey = propPattern.matcher(prop.toUpperCase()).replaceAll("_")
%>
  public static final TranslatableProvider ${propKey} = create("${prop}");<%
}%>

  private static TranslatableProvider create(final String key) {
    return TranslatableProvider.create(BUNDLE_NAME, key);
  }

  public static String bundleName() {
    return BUNDLE_NAME;
  }

  public static void load() {
    TranslatableProvider.loadBundle(
      BUNDLE_NAME,
      ${className}.class
    );
  }

  private ${className}() {
  }
}
